-- 1) Una base de datos hospitalaria contiene las siguientes relaciones: 
--      PACIENTES (CODIGO-PAC, APELLIDO-PAC, EDAD) 
--      MEDICAMENTOS (CODIGO-MED, PRECIO-UNITARIO) 
--      GASTOS (CODIGO-PAC, CODIGO-MED) 
-- Indicar las claves primarias y claves ajenas de cada relación.

CREATE TABLE PACIENTES (
	CODIGO_PAC INT,
	APELLIDO_PAC VARCHAR(25) NOT NULL,
	EDAD INT NOT NULL,
	CONSTRAINT PK_PACIENTES PRIMARY KEY (CODIGO_PAC),
	CONSTRAINT CK_EDAD_PACIENTE CHECK (EDAD > -1 AND EDAD < 115)
);

CREATE TABLE MEDICAMENTOS (
	CODIGO_MED INT,
	PRECIO_UNITARIO DECIMAL(10, 2) NOT NULL,
	CONSTRAINT PK_MEDICAMENTOS PRIMARY KEY (CODIGO_MED),
	CONSTRAINT CK_PRECIO_MEDICAMENTO CHECK (PRECIO_UNITARIO >= 0)
);

CREATE TABLE GASTOS (
	CODIGO_PAC INT,
	CODIGO_MED INT,
	CONSTRAINT PK_GASTOS PRIMARY KEY (CODIGO_PAC, CODIGO_MED),
	CONSTRAINT GASTOS_FK_PACIENTES_COD FOREIGN KEY (CODIGO_PAC) REFERENCES PACIENTES (CODIGO_PAC),
	CONSTRAINT GASTOS_FK_MEDICAMENTOS_COD FOREIGN KEY (CODIGO_MED) REFERENCES MEDICAMENTOS (CODIGO_MED)
);

-- 2) Dadas las siguientes relaciones: 
--      CURSOS (NUMCURSO, TITULO) 
--      OFRECIMIENTOS (NUMCURSO, NUMOFR, FECHA, AULA) 
--      PROFESORES (NUMCURSO, NUMOFR, NUMEMP) 
--      ESTUDIANTES (NUMCURSO, NUMOFR, NUMEMP, CALIFICACION) 
--      EMPLEADOS (NUMEMP, EMPLE-NOMBRE, PUESTO) 
-- Indicar las claves primarias y claves ajenas de cada relación.

CREATE TABLE CURSOS (
	NUM_CURSO INT,
	TITULO VARCHAR(25) NOT NULL,
	CONSTRAINT PK_CURSOS PRIMARY KEY (NUM_CURSO)
);

CREATE TABLE OFRECIMIENTOS (
	NUM_CURSO INT,
	NUM_OFR INT,
	FECHA DATE,
	AULA VARCHAR(20),
	CONSTRAINT PK_OFRECIMIENTOS PRIMARY KEY (NUM_CURSO, NUM_OFR),
	CONSTRAINT OFRECIMIENTOS_FK_CURSOS_NUM_CURSO FOREIGN KEY (NUM_CURSO) REFERENCES CURSOS (NUM_CURSO)
);

CREATE TABLE EMPLEADOS (
	NUM_EMP INT,
	EMPL_NOMBRE VARCHAR(50) NOT NULL,
	PUESTO VARCHAR(30),
	CONSTRAINT PK_EMPLEADOS PRIMARY KEY (NUM_EMP)
);

CREATE TABLE PROFESORES (
	NUM_CURSO INT,
	NUM_OFR INT,
	NUM_EMP INT,
	CONSTRAINT PK_PROFESORES PRIMARY KEY (NUM_CURSO, NUM_OFR, NUM_EMP),
	CONSTRAINT PROFESORES_FK_CURSOS_NUM_CURSO FOREIGN KEY (NUM_CURSO) REFERENCES CURSOS (NUM_CURSO),
	CONSTRAINT PROFESORES_FK_OFRECIMIENTOS_NUM_OFR FOREIGN KEY (NUM_CURSO, NUM_OFR) REFERENCES OFRECIMIENTOS (NUM_CURSO, NUM_OFR),
	CONSTRAINT PROFESORES_FK_EMPLEADOS_NUM_EMP FOREIGN KEY (NUM_EMP) REFERENCES EMPLEADOS (NUM_EMP)
);

CREATE TABLE ESTUDIANTES (
	NUM_CURSO INT,
	NUM_OFR INT,
	NUM_EMP INT,
	CALIFICACION INT,
	CONSTRAINT PK_ESTUDIANTES PRIMARY KEY (NUM_CURSO, NUM_OFR, NUM_EMP, CALIFICACION),
	CONSTRAINT ESTUDIANTES_FK_CURSOS_NUM_CURSO FOREIGN KEY (NUM_CURSO) REFERENCES CURSOS (NUM_CURSO),
	CONSTRAINT ESTUDIANTES_FK_OFRECIMIENTOS_NUM_OFR FOREIGN KEY (NUM_CURSO, NUM_OFR) REFERENCES OFRECIMIENTOS (NUM_CURSO, NUM_OFR),
	CONSTRAINT ESTUDIANTES_FK_EMPLEADOS_NUM_EMP FOREIGN KEY (NUM_EMP) REFERENCES EMPLEADOS (NUM_EMP)
);

-- 3) Dadas las siguientes tablas:
--      Empleados (cod_emp, nombre, apellido, tipo_doc, num_doc, categoria,  cod_ofic)
--      Oficinas (cod_ofic, descripción)
-- Crear las siguientes reglas de integridad:
--  * La columna cod_emp debe ser clave primaria.
--  * La columna cod_emp debe tener valores entre 100 y 1000.
--  * Las columnas tipo_doc y num_doc deben contener valores no repetidos (únicos).
--  * La columna Categoria debe contener algunos de los siguientes valores: Senior, Semi Senior, Junior.
--  * La columna cod_ofic debe tener valores que existan en la tabla Oficinas.

CREATE TABLE OFICINAS (
	COD_OFIC INT,
	DESCRIPCION VARCHAR(30) NOT NULL,
	CONSTRAINT PK_OFICINAS PRIMARY KEY (COD_OFIC)
);

CREATE TABLE EMPLEADOS (
	COD_EMP INT,
	NOMBRE VARCHAR(25) NOT NULL,
	APELLIDO VARCHAR(25) NOT NULL,
	TIPO_DOC VARCHAR(3) NOT NULL,
	NUM_DOC INT NOT NULL,
	CATEGORIA VARCHAR(15) NOT NULL,
	COD_OFIC INT,
	CONSTRAINT PK_EMPLEADOS PRIMARY KEY (COD_EMP),
	CONSTRAINT FK_OFICINAS_COD FOREIGN KEY (COD_OFIC) REFERENCES OFICINAS (COD_OFIC),
	CONSTRAINT CK_COD_EMP CHECK (COD_EMP >= 100 AND COD_EMP <= 1000),
	CONSTRAINT UK_TIPO_Y_NRO_DOC UNIQUE (TIPO_DOC, NUM_DOC),
	CONSTRAINT CK_CATEGORIA CHECK (UPPER(CATEGORIA) IN ('SENIOR', 'SEMI SENIOR', 'JUNIOR'))
);